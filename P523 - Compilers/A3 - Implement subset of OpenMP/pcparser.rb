#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.7
# from Racc grammer file "".
#

require 'racc/parser.rb'


# pcparser.rb: generated by racc

class PCParser < Racc::Parser

module_eval(<<'...end pcparser.y/module_eval...', 'pcparser.y', 160)

  def initialize
    @scanner = Scanner.new
  end

  def parse_array tokens
    yyparse tokens, :each
  end

  def parse_file
    do_parse
  end

  def next_token
    @scanner.next_token
  end

  # override the default error reporting function to report line number
  def on_error err_token_id, err_value, value_stack
    puts "Error at or near line #{@scanner.lineno}, while parsing '#{err_value}' (#{token_to_str(err_token_id)})"
    puts "Current parse stack:"
    (value_stack.length-1).downto(0) {|i| puts "\t#{value_stack[i].to_string}"}
  end

...end pcparser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    76,    67,    48,    47,    93,    22,    72,    50,    76,    66,
    48,    47,    66,    23,    72,    50,    76,   -33,    48,    47,
    62,    63,    72,    50,    43,    44,    45,    49,    62,    63,
   -36,    31,    43,    44,    45,    49,   -36,    94,    97,    67,
    43,    44,    45,    49,    48,    47,   -34,    66,    55,    50,
    48,    47,   -33,    58,    55,    50,    48,    47,    54,    98,
    55,    50,    91,    57,    99,   106,    43,    44,    45,    49,
    19,    18,    43,    44,    45,    49,    19,    30,    43,    44,
    45,    49,    48,    47,    96,   104,    55,    50,    48,    47,
    30,    21,    55,    50,    48,    47,    21,    13,    55,    50,
     7,     8,     9,    10,    43,    44,    45,    49,    12,    11,
    43,    44,    45,    49,     4,   nil,    43,    44,    45,    49,
    48,    47,   nil,   nil,    55,    50,    48,    47,   nil,   nil,
    55,    50,    48,    47,   nil,   nil,    55,    50,     7,     8,
     9,    10,    43,    44,    45,    49,   nil,   nil,    43,    44,
    45,    49,   nil,   nil,    43,    44,    45,    49,    48,    47,
   nil,   nil,    55,    50,    62,    63,    60,    61,    48,    47,
   nil,   nil,    41,    50,   nil,     7,     8,     9,    10,   nil,
    43,    44,    45,    49,    32,   nil,   nil,    36,    37,    38,
    43,    44,    45,    49,    48,    47,   nil,   nil,    55,    50,
    48,    47,   nil,   nil,    55,    50,    62,    63,    60,    61,
    64,    65,   nil,   nil,    92,   nil,    43,    44,    45,    49,
   nil,   nil,    43,    44,    45,    49,    48,    47,   nil,   nil,
    55,    50,   101,     7,     8,     9,    10,    48,    47,   nil,
   nil,    55,    50,    15,     7,     8,     9,    10,    43,    44,
    45,    49,    48,    47,   nil,   nil,    55,    50,   nil,    43,
    44,    45,    49,    48,    47,   nil,   nil,    55,    50,    62,
    63,    60,    61,    64,    43,    44,    45,    49,    48,    47,
   nil,   nil,    55,    50,   nil,    43,    44,    45,    49,    48,
    47,   nil,   nil,    55,    50,   nil,   nil,   nil,   nil,   nil,
    43,    44,    45,    49,    48,    47,   nil,   nil,    55,    50,
   nil,    43,    44,    45,    49,    62,    63,    60,    61,    64,
    65,   nil,   nil,   nil,   nil,   nil,    43,    44,    45,    49,
   nil,    79,    62,    63,    60,    61,    64,    65,    62,    63,
    60,    61,    64,    65,    62,    63,    60,    61,    64,    65,
    62,    63,    60,    61,    64,    65,    62,    63,    60,    61,
    64,    65,    62,    63,    60,    61,    64,    65,    62,    63,
    60,    61,    64,    65,    62,    63,    60,    61,    64,    65,
    62,    63,    60,    61,    64,    65 ]

racc_action_check = [
    76,    55,    76,    76,    72,    17,    76,    76,    51,    55,
    51,    51,    72,    17,    51,    51,    94,    72,    94,    94,
    82,    82,    94,    94,    76,    76,    76,    76,    81,    81,
   101,    23,    51,    51,    51,    51,   101,    75,    88,    41,
    94,    94,    94,    94,    30,    30,    42,    41,    30,    30,
    58,    58,    41,    35,    58,    58,    67,    67,    30,    90,
    67,    67,    67,    34,    90,   100,    30,    30,    30,    30,
   100,    14,    58,    58,    58,    58,    14,    28,    67,    67,
    67,    67,    66,    66,    77,    97,    66,    66,    48,    48,
    22,    18,    48,    48,    50,    50,    15,    12,    50,    50,
     3,     3,     3,     3,    66,    66,    66,    66,     6,     4,
    48,    48,    48,    48,     1,   nil,    50,    50,    50,    50,
    65,    65,   nil,   nil,    65,    65,    64,    64,   nil,   nil,
    64,    64,    99,    99,   nil,   nil,    99,    99,    19,    19,
    19,    19,    65,    65,    65,    65,   nil,   nil,    64,    64,
    64,    64,   nil,   nil,    99,    99,    99,    99,    96,    96,
   nil,   nil,    96,    96,    85,    85,    85,    85,    27,    27,
   nil,   nil,    27,    27,   nil,    27,    27,    27,    27,   nil,
    96,    96,    96,    96,    27,   nil,   nil,    27,    27,    27,
    27,    27,    27,    27,    49,    49,   nil,   nil,    49,    49,
   104,   104,   nil,   nil,   104,   104,    71,    71,    71,    71,
    71,    71,   nil,   nil,    71,   nil,    49,    49,    49,    49,
   nil,   nil,   104,   104,   104,   104,    93,    93,   nil,   nil,
    93,    93,    93,    93,    93,    93,    93,    47,    47,   nil,
   nil,    47,    47,    13,    13,    13,    13,    13,    93,    93,
    93,    93,    38,    38,   nil,   nil,    38,    38,   nil,    47,
    47,    47,    47,    62,    62,   nil,   nil,    62,    62,    86,
    86,    86,    86,    86,    38,    38,    38,    38,    60,    60,
   nil,   nil,    60,    60,   nil,    62,    62,    62,    62,    61,
    61,   nil,   nil,    61,    61,   nil,   nil,   nil,   nil,   nil,
    60,    60,    60,    60,    63,    63,   nil,   nil,    63,    63,
   nil,    61,    61,    61,    61,    53,    53,    53,    53,    53,
    53,   nil,   nil,   nil,   nil,   nil,    63,    63,    63,    63,
   nil,    53,   107,   107,   107,   107,   107,   107,    59,    59,
    59,    59,    59,    59,    89,    89,    89,    89,    89,    89,
    39,    39,    39,    39,    39,    39,    87,    87,    87,    87,
    87,    87,    73,    73,    73,    73,    73,    73,   103,   103,
   103,   103,   103,   103,   105,   105,   105,   105,   105,   105,
    80,    80,    80,    80,    80,    80 ]

racc_action_pointer = [
   nil,   114,   nil,    86,   109,   nil,    97,   nil,   nil,   nil,
   nil,   nil,    85,   230,    58,    74,   nil,    -6,    69,   124,
   nil,   nil,    70,    20,   nil,   nil,   nil,   161,    57,   nil,
    37,   nil,   nil,   nil,    39,    28,   nil,   nil,   245,   345,
   nil,    27,    21,   nil,   nil,   nil,   nil,   230,    81,   187,
    87,     3,   nil,   310,   nil,   -11,   nil,   nil,    43,   333,
   271,   282,   256,   297,   119,   113,    75,    49,   nil,   nil,
   nil,   201,    -8,   357,   nil,    19,    -5,    59,   nil,   nil,
   375,    23,    15,   nil,   nil,   159,   264,   351,    17,   339,
    46,   nil,   nil,   219,    11,   nil,   151,    65,   nil,   125,
    52,    12,   nil,   363,   193,   369,   nil,   327 ]

racc_action_default = [
    -4,   -67,    -1,    -2,   -67,    -3,   -67,    -7,    -8,    -9,
   -10,   108,   -67,   -67,   -67,   -67,   -12,   -13,   -67,   -67,
    -6,   -24,   -14,   -67,   -16,    -5,   -11,   -67,   -17,   -19,
   -67,   -15,   -22,   -23,   -67,   -67,   -27,   -28,   -29,   -31,
   -32,   -37,   -41,   -38,   -39,   -40,   -42,   -67,   -67,   -67,
   -67,   -67,   -18,   -67,   -21,   -37,   -41,   -25,   -67,   -30,
   -67,   -67,   -67,   -67,   -67,   -67,   -67,   -67,   -49,   -50,
   -51,   -67,   -37,   -65,   -60,   -62,   -67,   -67,   -66,   -20,
   -26,   -43,   -44,   -45,   -46,   -47,   -48,   -55,   -67,   -59,
   -67,   -57,   -52,   -67,   -67,   -63,   -67,   -53,   -56,   -67,
   -67,   -57,   -61,   -64,   -67,   -58,   -35,   -54 ]

racc_goto_table = [
    14,    39,    42,    74,    53,     6,    20,    29,    33,    25,
    24,    28,    59,    52,     5,     3,    27,    26,    34,    35,
    40,    68,    69,    70,    71,     2,    42,    88,    95,    51,
     1,   nil,    80,   nil,    81,    82,    83,    84,    85,    86,
    87,    89,   nil,   nil,   nil,   nil,   102,   nil,   nil,   nil,
   nil,    42,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    89,   nil,    42,
   103,   nil,   nil,   105,   nil,   nil,   nil,   nil,   107,   nil,
   100 ]

racc_goto_check = [
     6,    12,    18,    23,    12,     5,     7,    11,    14,     7,
     9,    10,    12,    11,     4,     3,    13,     8,    15,    16,
    17,    12,    12,    12,    12,     2,    18,    21,    23,     5,
     1,   nil,    12,   nil,    12,    12,    12,    12,    12,    12,
    12,    12,   nil,   nil,   nil,   nil,    23,   nil,   nil,   nil,
   nil,    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,    18,
    12,   nil,   nil,    12,   nil,   nil,   nil,   nil,    12,   nil,
     6 ]

racc_goto_pointer = [
   nil,    30,    25,    15,    11,     2,   -13,    -9,    -2,    -7,
   -11,   -15,   -26,    -5,   -19,    -9,    -8,    -7,   -25,   nil,
   nil,   -39,   nil,   -48,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,    17,   nil,   nil,    16,   nil,
   nil,   nil,    73,   nil,   nil,   nil,    77,   nil,    56,    78,
    46,   nil,    90,   nil,    75 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 34, :_reduce_none,
  1, 35, :_reduce_2,
  2, 36, :_reduce_3,
  0, 36, :_reduce_4,
  6, 37, :_reduce_5,
  5, 37, :_reduce_6,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  3, 39, :_reduce_11,
  1, 39, :_reduce_12,
  1, 41, :_reduce_13,
  2, 41, :_reduce_14,
  3, 41, :_reduce_15,
  2, 41, :_reduce_16,
  2, 42, :_reduce_17,
  2, 43, :_reduce_18,
  1, 43, :_reduce_19,
  3, 44, :_reduce_20,
  2, 44, :_reduce_21,
  3, 40, :_reduce_22,
  2, 46, :_reduce_23,
  0, 46, :_reduce_24,
  2, 47, :_reduce_none,
  3, 48, :_reduce_26,
  1, 48, :_reduce_27,
  1, 48, :_reduce_28,
  1, 48, :_reduce_29,
  2, 48, :_reduce_30,
  1, 48, :_reduce_none,
  1, 48, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  4, 52, :_reduce_35,
  3, 52, :_reduce_36,
  1, 45, :_reduce_none,
  1, 45, :_reduce_38,
  1, 45, :_reduce_39,
  1, 45, :_reduce_40,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  3, 45, :_reduce_43,
  3, 45, :_reduce_44,
  3, 45, :_reduce_45,
  3, 45, :_reduce_46,
  3, 45, :_reduce_47,
  3, 45, :_reduce_48,
  2, 45, :_reduce_49,
  2, 45, :_reduce_50,
  2, 45, :_reduce_51,
  3, 45, :_reduce_52,
  4, 51, :_reduce_53,
  4, 54, :_reduce_54,
  1, 54, :_reduce_55,
  4, 53, :_reduce_56,
  3, 53, :_reduce_57,
  3, 55, :_reduce_58,
  1, 55, :_reduce_59,
  2, 50, :_reduce_60,
  3, 56, :_reduce_61,
  1, 56, :_reduce_62,
  2, 56, :_reduce_63,
  3, 57, :_reduce_64,
  1, 57, :_reduce_none,
  1, 57, :_reduce_none ]

racc_reduce_n = 67

racc_shift_n = 108

racc_token_table = {
  false => 0,
  :error => 1,
  :UMINUS => 2,
  :UPLUS => 3,
  :PREFIXOP => 4,
  "*" => 5,
  "/" => 6,
  "+" => 7,
  "-" => 8,
  :BOOL_OP => 9,
  :REL_OP => 10,
  :IDENTIFIER => 11,
  "(" => 12,
  ")" => 13,
  :CHAR => 14,
  :INT => 15,
  :DOUBLE => 16,
  :VOID => 17,
  "," => 18,
  "&" => 19,
  "[" => 20,
  "]" => 21,
  "{" => 22,
  "}" => 23,
  ";" => 24,
  "=" => 25,
  :BREAK => 26,
  :CONTINUE => 27,
  :RETURN => 28,
  :INT_NUM => 29,
  :REAL_NUM => 30,
  :STRING => 31,
  :PREFIX_OP => 32 }

racc_nt_base = 33

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "UMINUS",
  "UPLUS",
  "PREFIXOP",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "BOOL_OP",
  "REL_OP",
  "IDENTIFIER",
  "\"(\"",
  "\")\"",
  "CHAR",
  "INT",
  "DOUBLE",
  "VOID",
  "\",\"",
  "\"&\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\";\"",
  "\"=\"",
  "BREAK",
  "CONTINUE",
  "RETURN",
  "INT_NUM",
  "REAL_NUM",
  "STRING",
  "PREFIX_OP",
  "$start",
  "target",
  "program",
  "function_defs",
  "function_def",
  "typename",
  "formal_params",
  "block",
  "formal_param",
  "array_formal",
  "array_formal_subs",
  "array_formal_sub",
  "expr",
  "stmt_list",
  "stmt",
  "simple_stmt",
  "lval",
  "declaration",
  "array_ref",
  "function_decl",
  "function_call",
  "array_index_list",
  "actual_params",
  "declaration_list",
  "decl_stmt" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'pcparser.y', 19)
  def _reduce_2(val, _values, result)
     result = :Program[val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 23)
  def _reduce_3(val, _values, result)
     result = val[0] + [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 24)
  def _reduce_4(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 28)
  def _reduce_5(val, _values, result)
     result = :Function[val[0], val[1], :Formals[val[3]], :Block[val[5]]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 29)
  def _reduce_6(val, _values, result)
     result = :Function[val[0], val[1], :Formals[[]], :Block[val[4]]] 
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

module_eval(<<'.,.,', 'pcparser.y', 40)
  def _reduce_11(val, _values, result)
     result = val[0] + [val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 41)
  def _reduce_12(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 45)
  def _reduce_13(val, _values, result)
     result = [val[0], ''] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 46)
  def _reduce_14(val, _values, result)
     result = [val[0], val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 47)
  def _reduce_15(val, _values, result)
     result = [val[0], :RefArg[val[2]]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 48)
  def _reduce_16(val, _values, result)
     result = [val[0], val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 52)
  def _reduce_17(val, _values, result)
     result = :ArrayArg[val[0], val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 56)
  def _reduce_18(val, _values, result)
     result = val[0] + [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 57)
  def _reduce_19(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 61)
  def _reduce_20(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 62)
  def _reduce_21(val, _values, result)
     result = :EmptySubscript[] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 66)
  def _reduce_22(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 70)
  def _reduce_23(val, _values, result)
     result = val[0] + [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 71)
  def _reduce_24(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 25 omitted

module_eval(<<'.,.,', 'pcparser.y', 79)
  def _reduce_26(val, _values, result)
     result = :Assignment[val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 80)
  def _reduce_27(val, _values, result)
     result = :BreakStmt[] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 81)
  def _reduce_28(val, _values, result)
     result = :ContinueStmt[] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 82)
  def _reduce_29(val, _values, result)
     result = :ReturnStmt[] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 83)
  def _reduce_30(val, _values, result)
     result = :ReturnStmt[val[1]] 
    result
  end
.,.,

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'pcparser.y', 94)
  def _reduce_35(val, _values, result)
     result = :Function[val[0], val[1], :Formals[val[3]], :Block[val[5]]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 95)
  def _reduce_36(val, _values, result)
     result = :Function[val[0], val[1], :Formals[[]], :Block[val[4]]] 
    result
  end
.,.,

# reduce 37 omitted

module_eval(<<'.,.,', 'pcparser.y', 100)
  def _reduce_38(val, _values, result)
     result = :ConstInt[val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 101)
  def _reduce_39(val, _values, result)
     result = :ConstReal[val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 102)
  def _reduce_40(val, _values, result)
     result = :ConstString[val[0]] 
    result
  end
.,.,

# reduce 41 omitted

# reduce 42 omitted

module_eval(<<'.,.,', 'pcparser.y', 105)
  def _reduce_43(val, _values, result)
     result = :BinaryOp[val[0], '+', val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 106)
  def _reduce_44(val, _values, result)
     result = :BinaryOp[val[0], '-', val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 107)
  def _reduce_45(val, _values, result)
     result = :BinaryOp[val[0], '*', val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 108)
  def _reduce_46(val, _values, result)
     result = :BinaryOp[val[0], '/', val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 109)
  def _reduce_47(val, _values, result)
     result = :BinaryOp[val[0], val[1], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 110)
  def _reduce_48(val, _values, result)
     result = :BinaryOp[val[0], val[1], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 111)
  def _reduce_49(val, _values, result)
     result = :UnaryOp['=', val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 112)
  def _reduce_50(val, _values, result)
     result = :UnaryOp0['+', val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 113)
  def _reduce_51(val, _values, result)
     result = :UnaryOp[val[0], val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 114)
  def _reduce_52(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 118)
  def _reduce_53(val, _values, result)
     result = :ArrayRef[val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 122)
  def _reduce_54(val, _values, result)
     result = val[0] + [val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 123)
  def _reduce_55(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 127)
  def _reduce_56(val, _values, result)
     result = :FunctionCall[val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 128)
  def _reduce_57(val, _values, result)
     result = :FunctionCall[val[0], [[]]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 132)
  def _reduce_58(val, _values, result)
     result = val[0] + [val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 133)
  def _reduce_59(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 137)
  def _reduce_60(val, _values, result)
     result = :Declaration[val[0], val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 141)
  def _reduce_61(val, _values, result)
     result = [val[0],val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 142)
  def _reduce_62(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 143)
  def _reduce_63(val, _values, result)
     result = :PointerDeclaration[val[0],val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'pcparser.y', 147)
  def _reduce_64(val, _values, result)
     result = :Assignment[val[0], val[2]] 
    result
  end
.,.,

# reduce 65 omitted

# reduce 66 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class PCParser


# I suggest not using the footer, unless you want to execute some code once when the parser is included
require 'rubywrite'
require 'PCParse/scanner'
