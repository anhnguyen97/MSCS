<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<!-- saved from url=(0077)http://www.cs.indiana.edu/~achauhan/Teaching/P523/2012-Spring/Assignments/02/ -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta http-equiv="Pragma" content="no-cache">

  
    <title>P523: Assignment 2</title>
    <link href="./P523  Assignment 2_files/index.css" rel="stylesheet" type="text/css">
    <script src="./P523  Assignment 2_files/tabs.js"></script>
    <script src="./P523  Assignment 2_files/pages.js"></script>
    <script>window.onload = function()
      {
        return decorate_page('Assignments', 'P523', '../../', Array('Assignments','01'), Array('../index.html'));
      }
    </script>
  </head>

  <body>
    <div id="head"></div>
    <noscript>
      &lt;div class="note"&gt;
	You will need to enable Javascript to see the navigation menu.
      &lt;/div&gt;
    </noscript>

    <table id="tabs"><tbody><tr><td><div class="roundtop" classname="roundtop"><div class="r1" classname="r1"></div><div class="r2" classname="r2"></div><div class="r3" classname="r3"></div><div class="r4" classname="r4"></div><div class="r5" classname="r5"></div></div><span><a href="http://www.cs.indiana.edu/~achauhan/Teaching/P523/2012-Spring/index.html">Home</a></span></td><td><div class="roundtop" classname="roundtop"><div class="r1" classname="r1"></div><div class="r2" classname="r2"></div><div class="r3" classname="r3"></div><div class="r4" classname="r4"></div><div class="r5" classname="r5"></div></div><span><a href="http://www.cs.indiana.edu/~achauhan/Teaching/P523/2012-Spring/schedule.html">Schedule</a></span></td><td><div class="roundtop_selected" classname="roundtop_selected"><div class="r1" classname="r1"></div><div class="r2" classname="r2"></div><div class="r3" classname="r3"></div><div class="r4" classname="r4"></div><div class="r5" classname="r5"></div></div><span class="selected" classname="selected">Assignments</span></td><td><div class="roundtop" classname="roundtop"><div class="r1" classname="r1"></div><div class="r2" classname="r2"></div><div class="r3" classname="r3"></div><div class="r4" classname="r4"></div><div class="r5" classname="r5"></div></div><span><a href="http://www.cs.indiana.edu/~achauhan/Teaching/P523/2012-Spring/policies.html">Policies</a></span></td><td><div class="roundtop" classname="roundtop"><div class="r1" classname="r1"></div><div class="r2" classname="r2"></div><div class="r3" classname="r3"></div><div class="r4" classname="r4"></div><div class="r5" classname="r5"></div></div><span><a href="http://www.cs.indiana.edu/~achauhan/Teaching/P523/2012-Spring/resources.html">Resources</a></span></td><td><div class="roundtop" classname="roundtop"><div class="r1" classname="r1"></div><div class="r2" classname="r2"></div><div class="r3" classname="r3"></div><div class="r4" classname="r4"></div><div class="r5" classname="r5"></div></div><span><a href="https://oncourse.iu.edu/" target="_top">OnCourse</a></span></td></tr></tbody></table><div class="roundtop_content" classname="roundtop_content"><div class="r1" classname="r1"></div><div class="r2" classname="r2"></div><div class="r3" classname="r3"></div><div class="r4" classname="r4"></div><div class="r5" classname="r5"></div></div><div id="content"><div id="linksequence">Home<ul><li>&nbsp;»&nbsp;<a href="http://www.cs.indiana.edu/~achauhan/Teaching/P523/2012-Spring/Assignments/index.html">Assignments</a></li><li>&nbsp;»&nbsp;01</li></ul></div>
      <h1>Assignment 2 (50 points)</h1>
      <table class="due">
	<tbody>
	  <tr>
	    <td>Announced 2012-02-07 (Tue)</td>
	    <th>Due 2012-02-19 (Sun)</th>
	  </tr>
	</tbody>
      </table>

      <p>
	The purpose of this assignment is to get familiar with a popular back-end environment, called
	<a href="http://www.llvm.org/">LLVM</a>, and learn the basics of code generation.  You will build
	on <a href="http://www.cs.indiana.edu/~achauhan/Teaching/P523/2012-Spring/Assignments/01">Assignment&nbsp;1</a>.
      </p>

      <p>
	You have two tasks:
      </p>
      <ol>
	<li>
	  Manually translate the following C function to LLVM assembly language.
	  <pre> double *matvec (double **A, double *B, double *C, int n)
 {
   int i, j;
   for (i = 0; i &lt; n; i++) {
     C[i] = 0.0;
     for (j = 0; j &lt; n; j++) {
        C[i] = C[i] + A[i][j]*B[j];
     }
   }
   return C;
 }
	  </pre>
          Write a test case, i.e., a driver program, that generates a matrix and a vector and calls
          the <tt>matvec</tt> function.  Use a C version of this function to verify the results.  Compile the driver
          code with the LLVM compiler (available on <tt>timon</tt> and <tt>pumbaa</tt>) so that it can link with your
          LLVM assembly version of <tt>matvec</tt>.  Compare your hand-written assembly with the LLVM assembly code
          generated by the LLVM compiler from your C version.
	</li>

	<li>
	  Write a code generator that accepts a function in <a href="http://www.cs.indiana.edu/~achauhan/Teaching/P523/2012-Spring/Assignments/pidginc.html">PidginC</a> and generates LLVM
	  assembly code.  You do not need to handle compound statements, but you must handle nested scopes.  For this
	  part you will use the parser you wrote for <a href="http://www.cs.indiana.edu/~achauhan/Teaching/P523/2012-Spring/Assignments/01/">Assignment&nbsp;1</a>.  If needed, extend your
	  parser to handle nested scopes.  Then, modify <tt>pcc.rb</tt> so that instead of unparsing, it generates the
	  LLVM assembly.  You may want to keep the unparsing functionality in place, but invoke it only with
	  a <tt>-u</tt> option.
	</li>
      </ol>

      <p>
	Create a directory called <tt>llvm</tt> under the <tt>test</tt> directory and populate it with your test
	cases.
      </p>

      <p>
	Note that you <b>will not be generating the LLVM bit-code</b>, which is a binary format.  Instead, you will
	generate LLVM assembly, in plain text.
      </p>

      <p>
	You will be evaluated based on the following:
      </p>
      <ol>
	<li>
	  The correctness of your LLVM code for the first part.
	</li>
	<li>
	  Correctness of your generated code and completeness in handling the PidginC features for the second part.
	</li>
	<li>
	  The collection of your own test cases that you submit with your solution.  Add your tests to a
	  new <tt>test/llvm</tt> directory.
	</li>
	<li>
	  The clarity of your code.
	</li>
      </ol>

      <p>
	When you are ready to turn-in the assignment, use <tt>git&nbsp;tag&nbsp;-a</tt> to create a tag <tt>A2</tt>
	and do not forget to push it back to the server.  Then, send the instructor an e-mail and say if you are using
	additional time to finish your assignment.  The instructor will extract the submission directly from your Git
	repository.  <b>Do not send a tar-ball of the entire code in e-mail.</b>
      </p>

      <hr>

      <p>
	Links:
      </p>
      <ul>
	<li><a href="http://www.cs.indiana.edu/~achauhan/Teaching/P523/2012-Spring/Assignments/pidginc.html">PidginC</a></li>
	<li><a href="http://docs.rubyrake.org/">Rake documentation</a></li>
	<li><a href="http://www.llvm.org/">LLVM</a></li>
	<li><a href="http://llvm.org/releases/2.6/docs/tutorial/JITTutorial1.html">LLVM assembly tutorial</a></li>
	<li><a href="http://llvm.org/docs/LangRef.html">LLVM assembly reference</a></li>
      </ul>
    </div>
  

<div class="roundtop_content" classname="roundtop_content"><div class="r5" classname="r5"></div><div class="r4" classname="r4"></div><div class="r3" classname="r3"></div><div class="r2" classname="r2"></div><div class="r1" classname="r1"></div></div><address><a href="http://www.cs.indiana.edu/~achauhan/Teaching/P523/2012-Spring/index.html">P523</a> / <a target="_top" href="http://www.cs.indiana.edu/~achauhan/">Arun Chauhan</a> / <a target="_top" href="http://www.cs.indiana.edu/">Computer Science</a> / <a target="_top" href="http://www.indiana.edu/">Indiana University</a></address></body></html>